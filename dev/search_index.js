var documenterSearchIndex = {"docs":
[{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = HCIToolbox","category":"page"},{"location":"index.html#HCIToolbox-1","page":"Home","title":"HCIToolbox","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"Modules = [HCIToolbox]","category":"page"},{"location":"index.html#HCIToolbox.Mean","page":"Home","title":"HCIToolbox.Mean","text":"Mean\n\nDesign using the mean of the cube\n\nExamples\n\njulia> cube = DataCube(ones(100, 100, 30));\n\njulia> design(Mean, cube)\n(A = [1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0; … ; 1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0], w = UniformScaling{Bool}(true), S = [1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0; … ; 1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0])\n\nSee Also\n\nMedian\n\n\n\n\n\n","category":"type"},{"location":"index.html#HCIToolbox.Median","page":"Home","title":"HCIToolbox.Median","text":"Median\n\nDesign using the median of the cube\n\nExamples\n\njulia> cube = DataCube(ones(100, 100, 30));\n\njulia> design(Median, cube)\n(A = [1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0; … ; 1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0], w = UniformScaling{Bool}(true), S = [1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0; … ; 1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0])\n\nSee Also\n\nMean\n\n\n\n\n\n","category":"type"},{"location":"index.html#HCIToolbox.NMF","page":"Home","title":"HCIToolbox.NMF","text":"NMF\n\n\n\n\n\n","category":"type"},{"location":"index.html#HCIToolbox.PCA","page":"Home","title":"HCIToolbox.PCA","text":"PCA\n\nUse principal component analysis (PCA) to reduce data cube. ncomponents defines how many principal components to use. \n\nUses MultivariateStats.PCA for decomposition. See MultivariateStats.fit(PCA; ...) for keyword arguments\n\nArguments\n\nncomps::Int = nframes(::DataCube) - The number of components to keep. Cannot be larger than the number of frames in the DataCube.=\n\nExamples\n\njulia> cube = DataCube(ones(100, 100, 30));\n\njulia> design(PCA, cube)\n(A = [1.0; 0.0; … ; 0.0; 0.0], w = [0.0 0.0 … 0.0 0.0], S = [1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0; … ; 1.0 1.0 … 1.0 1.0; 1.0 1.0 … 1.0 1.0])\n\n\n\n\n\n\n","category":"type"},{"location":"index.html#HCIToolbox.Pairet","page":"Home","title":"HCIToolbox.Pairet","text":"Pairet{<:Union{PCA, NMF}}\n\n\n\n\n\n","category":"type"},{"location":"index.html#Base.reduce-Tuple{Type{#s16} where #s16<:HCIToolbox.Design,DataCube,Vararg{Any,N} where N}","page":"Home","title":"Base.reduce","text":"reduce(::Type{<:Design}, ::DataCube, args...; collapse=median, kwargs...)\n\nUsing a given Design, will reduce the DataCube by first finding the approximate reconstruction with design and then derotating and collapsing (using whichever function specified by collapse). Any kwargs will be passed to design.\n\n\n\n\n\n","category":"method"},{"location":"index.html#HCIToolbox.derotate!-Tuple{DataCube}","page":"Home","title":"HCIToolbox.derotate!","text":"derotate!(::DataCube)\n\nIn-place version of derotate\n\n\n\n\n\n","category":"method"},{"location":"index.html#HCIToolbox.derotate-Tuple{DataCube}","page":"Home","title":"HCIToolbox.derotate","text":"derotate(::DataCube)\n\nDe-rotates a DataCube using its internal angles.\n\n\n\n\n\n","category":"method"},{"location":"index.html#HCIToolbox.design-Tuple{Type{#s20} where #s20<:HCIToolbox.Design,DataCube}","page":"Home","title":"HCIToolbox.design","text":"design(::Type{<:Design}, ::DataCube, args...; kwargs...)\n\nCreate a design matrix and weights from the given DataCube. The kwargs will vary based on the design algorithm. \n\nReturns\n\nThe output of a design matrix will be a named tuple with 3 parameters:\n\nA - The design Matrix\nw - The weight vector (the transform of our data cube)\nS - The reconstruction of our data cube (usually A * w)\n\n\n\n\n\n","category":"method"},{"location":"index.html#HCIToolbox.mask!-Tuple{AbstractArray{T,2} where T,Any}","page":"Home","title":"HCIToolbox.mask!","text":"mask!(::AbstractMatrix, npix)\n\nIn-place version of mask\n\n\n\n\n\n","category":"method"},{"location":"index.html#HCIToolbox.mask-Tuple{AbstractArray{T,2} where T,Any}","page":"Home","title":"HCIToolbox.mask","text":"mask(::AbstractMatrix, npix)\n\nMask the inner-circle of an image with radius npix.\n\n\n\n\n\n","category":"method"},{"location":"index.html#Statistics.mean-Tuple{DataCube}","page":"Home","title":"Statistics.mean","text":"Statistics.mean(::DataCube)\n\nCollapses a DataCube by finding the mean frame. Note: does not derotate.\n\n\n\n\n\n","category":"method"},{"location":"index.html#Statistics.median-Tuple{DataCube}","page":"Home","title":"Statistics.median","text":"Statistics.median(::DataCube)\n\nCollapses a DataCube by finding the median frame. Note: does not derotate.\n\n\n\n\n\n","category":"method"}]
}
