var documenterSearchIndex = {"docs":
[{"location":"api/#API/Reference-1","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/#","page":"API/Reference","title":"API/Reference","text":"For now, here is a dump of all documented functions and types.","category":"page"},{"location":"api/#Index-1","page":"API/Reference","title":"Index","text":"","category":"section"},{"location":"api/#","page":"API/Reference","title":"API/Reference","text":"","category":"page"},{"location":"api/#API/Reference-2","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/#","page":"API/Reference","title":"API/Reference","text":"Modules = [HCIToolbox]","category":"page"},{"location":"api/#HCIToolbox.collapse!-Union{Tuple{T}, Tuple{AbstractArray{T,3},AbstractArray{T,1} where T}} where T","page":"API/Reference","title":"HCIToolbox.collapse!","text":"collapse!(cube, angles; method=median, deweight=true)\n\nAn in-place version of the derotating collapse. The only difference is in this version the cube will be derotated in-place.\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.collapse-Union{Tuple{AbstractArray{T,3}}, Tuple{T}} where T","page":"API/Reference","title":"HCIToolbox.collapse","text":"collapse(cube, [angles]; method=median, deweight=true, fill=0)\n\nCombine all the frames of a cube using method. If angles are provided, will use derotate before combining.\n\nIf deweight is true, the method of Bottom et al. 2017 will be used in which the combined image will be the derotated weighted sum of the frames weighted by the temporal variance. fill will be passed to derotate.\n\nExamples\n\njulia> X = ones(2, 3, 3);\n\njulia> collapse(X)\n3×3 Array{Float64,2}:\n 1.0  1.0  1.0\n 1.0  1.0  1.0\n 1.0  1.0  1.0\n\njulia> collapse(X, [0, 90])\n3×3 Array{Float64,2}:\n 0.5  1.0  0.5\n 1.0  1.0  1.0\n 0.5  1.0  0.5\n\njulia> collapse(X, [0, 90], fill=NaN)\n3×3 Array{Float64,2}:\n NaN    1.0  NaN\n   1.0  1.0    1.0\n NaN    1.0  NaN\n\n\nSee Also\n\ncollapse!\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.cube-Tuple{AbstractArray{T,2} where T}","page":"API/Reference","title":"HCIToolbox.cube","text":"cube(matrix)\n\nGiven a matrix of size (n, z), returns a cube of size (n, x, x) where x=√z.\n\nWill throw an error if z is not a perfect square.\n\nExamples\n\njulia> X = ones(3, 4)\n3×4 Array{Float64,2}:\n 1.0  1.0  1.0  1.0\n 1.0  1.0  1.0  1.0\n 1.0  1.0  1.0  1.0\n\njulia> cube(X)\n3×2×2 Array{Float64,3}:\n[:, :, 1] =\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n\n[:, :, 2] =\n 1.0  1.0\n 1.0  1.0\n 1.0  1.0\n\nSee Also\n\nmatrix\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.derotate!-Union{Tuple{T}, Tuple{AbstractArray{T,3},AbstractArray{T,1} where T}} where T","page":"API/Reference","title":"HCIToolbox.derotate!","text":"derotate!(cube, angles; fill=0)\n\nIn-place version of derotate\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.derotate-Union{Tuple{T}, Tuple{AbstractArray{T,3},AbstractArray{T,1} where T}} where T","page":"API/Reference","title":"HCIToolbox.derotate","text":"derotate(cube, angles; fill=0)\n\nRotates an array using the given angles in degrees.\n\nThis will rotate frame i counter-clockwise by the amount deg2rad(angles[i]). Any values outside the original axes will be replaced with fill\n\nSee Also\n\nderotate!, rotate, rotate!\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.mask_annulus!-Tuple{AbstractArray{T,2} where T,Any,Any}","page":"API/Reference","title":"HCIToolbox.mask_annulus!","text":"mask_annulus!(::AbstractMatrix, npix_in, npix_out; fill=NaN)\n\nIn-place version of mask_annulus\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.mask_annulus-Tuple{AbstractArray{T,2} where T,Any,Any}","page":"API/Reference","title":"HCIToolbox.mask_annulus","text":"mask_annulus(::AbstractMatrix, npix_in, npix_out; fill=0)\n\nMask an annular region of an image with inner-radius npix_in, outer-radius npix_out with value fill. Note that the input type must be compatible with the fill value's type.\n\nSee Also\n\nmask_annulus!\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.mask_circle!-Tuple{AbstractArray{T,2} where T,Any}","page":"API/Reference","title":"HCIToolbox.mask_circle!","text":"mask_circle!(::AbstractMatrix, npix; fill=0)\nmask_circle!(::AbstractArray, npix; fill=0)\n\nIn-place version of mask_circle\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.mask_circle-Tuple{AbstractArray{T,2} where T,Any}","page":"API/Reference","title":"HCIToolbox.mask_circle","text":"mask_circle(::AbstractMatrix, npix; fill=0)\nmask_circle(::AbstractArray, npix; fill=0)\n\nMask the inner-circle of an image with radius npix with value fill. Note that the input type must be compatible with the fill value's type. If the input is a cube it will mask each frame individually.\n\nSee Also\n\nmask_circle!\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.matrix-Union{Tuple{AbstractArray{T,3}}, Tuple{T}} where T","page":"API/Reference","title":"HCIToolbox.matrix","text":"matrix(cube)\n\nGiven a cube of size (n, x, y) returns a matrix with size (n, x * y) where each row is a flattened image from the cube.\n\nExamples\n\njulia> X = ones(3, 2, 2);\n\njulia> matrix(X)\n3×4 Array{Float64,2}:\n 1.0  1.0  1.0  1.0\n 1.0  1.0  1.0  1.0\n 1.0  1.0  1.0  1.0\n\nSee Also\n\ncube\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.normalize_par_angles!-Tuple{Any}","page":"API/Reference","title":"HCIToolbox.normalize_par_angles!","text":"normalize_par_angles!(angles)\n\nIn-place version of normalize_par_angles\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.normalize_par_angles-Tuple{Any}","page":"API/Reference","title":"HCIToolbox.normalize_par_angles","text":"normalize_par_angles(angles)\n\nEnsures parallactic angle list (in degrees) is positive monotonic with no jumps greater than 180°.\n\nExamples\n\njulia> normalize_par_angles([-10, 20, 190])\n3-element Array{Int64,1}:\n 350\n  20\n 190\n\n\n\n\n\n","category":"method"},{"location":"api/#HCIToolbox.get_annulus_segments-NTuple{4,Any}","page":"API/Reference","title":"HCIToolbox.get_annulus_segments","text":"get_annulus_segments(data, inner_radius, width, [nsegments]; theta_init=0, scale_factor=1, mode=:index)\n\nReturns indices or values in segments of a centered annulus.\n\nModes\n\n:mask - returns a positive boolean mask for indexing\n:value - returns the data values indexed with the boolean mask\n:apply - returns the input data weighted by the boolean mask\n\n\n\n\n\n","category":"method"},{"location":"api/#","page":"API/Reference","title":"API/Reference","text":"Modules = [HCIToolbox.Metrics]","category":"page"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = HCIToolbox","category":"page"},{"location":"#HCIToolbox.jl-1","page":"Home","title":"HCIToolbox.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: GitHub) (Image: Build Status) (Image: Coverage) (Image: License)","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"From Julia enter Pkg mode","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia>]\n\n(1.3) pkg> add HCIToolbox","category":"page"},{"location":"#License-1","page":"Home","title":"License","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This work is distributed under the MIT \"expat\" license. See LICENSE for more information.","category":"page"}]
}
